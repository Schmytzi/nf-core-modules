nextflow_process {

    name "Test Process ONT_SPECTRE"
    script "../main.nf"
    process "ONTSPECTRE_CNVCALLER"

    tag "modules"
    tag "modules_nfcore"
    tag "ontspectre"

    setup {
        run("MOSDEPTH") {
            script "../../../mosdepth/main.nf"
            process {
                """
                input[0] = [
                    [ id: 'test' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/nanopore/bam/test.sorted.phased.bam.bai', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.bed', checkIfExists: true)
                ]
                input[1] = [[],[]]
                """
            }
        }
    }

    test("homo sapiens - [summary, bed, vcf, tbi]"){
        when {
            process {
                """
                input[0] = MOSDEPTH.out.summary_txt
                    .join(MOSDEPTH.out.regions_bed)
                    .join(MOSDEPTH.out.regions_csi)
                    .join(Channel.of([
                        [id : 'test'],
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/NA12878_GIAB.chr22.vcf.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/vcf/NA12878_GIAB.chr22.vcf.gz.csi', checkIfExists: true)
                    ]))
                input[1] = [
                    [ id : 'GRCh38' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz')
                ]
                input[2] = [
                    [ id : 'GRCh38' ],
                    file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta.gz.fai')
                ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = 1000
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("homo sapiens - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id: 'test' ],
                    file("summary"),
                    file("regions"),
                    file("vcf.gz"),
                    file("vcf.gz.tbi")
                ]
                input[1] = [
                    [ id: 'test' ],
                    file("fasta")
                ]
                input[2] = [
                    [ id: 'test' ],
                    file("fai")
                ]
                input[3] = [ [], [] ]
                input[4] = [ [], [] ]
                input[5] = 1000
                """

            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

}